#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from geometry_msgs.msg import PoseStamped
import numpy as np

class CartesianMotionPublisher(Node):
    def __init__(self):
        super().__init__('cartesian_motion_publisher')

        self.controller_name = '/target_frame'
        self.publisher = self.create_publisher(PoseStamped, self.controller_name, 10)

        self.cartesian_goals = [
            {'x': 471, 'y': -6, 'z': 237, 'w': 0},
            {'x': 483.24, 'y': -260.76, 'z': 150, 'w': 0},
            {'x': 483.24, 'y': -260.76, 'z': 125, 'w': 0},
            {'x': 478.92, 'y': -256.32, 'z': 125, 'w': 0},
            {'x': 479.88, 'y': -241.56, 'z': 125, 'w': 0},
            {'x': 481.68, 'y': -240.24, 'z': 125, 'w': 0},
            {'x': 481.68, 'y': -240.24, 'z': 150, 'w': 0},
            {'x': 506.88, 'y': -249.72, 'z': 150, 'w': 0},
            {'x': 506.88, 'y': -249.72, 'z': 125, 'w': 0},
            {'x': 503.52, 'y': -244.92000000000002, 'z': 125, 'w': 0},
            {'x': 504.36, 'y': -232.44, 'z': 125, 'w': 0},
            {'x': 499.56, 'y': -232.32, 'z': 125, 'w': 0},
            {'x': 484.92, 'y': -235.92000000000002, 'z': 125, 'w': 0},
            {'x': 467.52, 'y': -238.8, 'z': 125, 'w': 0},
            {'x': 461.15999999999997, 'y': -239.16, 'z': 125, 'w': 0},
            {'x': 459.36, 'y': -239.64, 'z': 125, 'w': 0},
            {'x': 458.15999999999997, 'y': -241.08, 'z': 125, 'w': 0},
            {'x': 458.15999999999997, 'y': -241.08, 'z': 150, 'w': 0},
            {'x': 453.84, 'y': -256.56, 'z': 150, 'w': 0},
            {'x': 453.84, 'y': -256.56, 'z': 125, 'w': 0},
            {'x': 452.4, 'y': -254.88, 'z': 125, 'w': 0},
            {'x': 450.48, 'y': -250.2, 'z': 125, 'w': 0},
            {'x': 455.88, 'y': -231.48000000000002, 'z': 125, 'w': 0},
            {'x': 455.88, 'y': -231.48000000000002, 'z': 150, 'w': 0},
            {'x': 502.2, 'y': -224.28, 'z': 150, 'w': 0},
            {'x': 502.2, 'y': -224.28, 'z': 125, 'w': 0},
            {'x': 499.2, 'y': -219.6, 'z': 125, 'w': 0},
            {'x': 504.12, 'y': -211.08, 'z': 125, 'w': 0},
            {'x': 515.76, 'y': -198.12, 'z': 125, 'w': 0},
            {'x': 523.3199999999999, 'y': -192.12, 'z': 125, 'w': 0},
            {'x': 528.84, 'y': -188.51999999999998, 'z': 125, 'w': 0},
            {'x': 532.44, 'y': -187.32, 'z': 125, 'w': 0},
            {'x': 532.68, 'y': -186.48000000000002, 'z': 125, 'w': 0},
            {'x': 532.68, 'y': -186.48000000000002, 'z': 150, 'w': 0},
            {'x': 502.56, 'y': -207.0, 'z': 150, 'w': 0},
            {'x': 502.56, 'y': -207.0, 'z': 125, 'w': 0},
            {'x': 502.2, 'y': -190.2, 'z': 125, 'w': 0},
            {'x': 504.6, 'y': -163.68, 'z': 125, 'w': 0},
            {'x': 503.76, 'y': -156.72, 'z': 125, 'w': 0},
            {'x': 503.76, 'y': -156.72, 'z': 150, 'w': 0},
            {'x': 483.24, 'y': -229.32, 'z': 150, 'w': 0},
            {'x': 483.24, 'y': -229.32, 'z': 125, 'w': 0},
            {'x': 475.68, 'y': -225.36, 'z': 125, 'w': 0},
            {'x': 473.28, 'y': -221.88, 'z': 125, 'w': 0},
            {'x': 473.28, 'y': -221.88, 'z': 150, 'w': 0},
            {'x': 491.4, 'y': -212.88, 'z': 150, 'w': 0},
            {'x': 491.4, 'y': -212.88, 'z': 125, 'w': 0},
            {'x': 488.88, 'y': -212.16, 'z': 125, 'w': 0},
            {'x': 482.88, 'y': -212.28, 'z': 125, 'w': 0},
            {'x': 475.08, 'y': -213.24, 'z': 125, 'w': 0},
            {'x': 458.4, 'y': -216.96, 'z': 125, 'w': 0},
            {'x': 453.0, 'y': -216.6, 'z': 125, 'w': 0},
            {'x': 453.0, 'y': -216.6, 'z': 150, 'w': 0},
            {'x': 490.44, 'y': -196.56, 'z': 150, 'w': 0},
            {'x': 490.44, 'y': -196.56, 'z': 125, 'w': 0},
            {'x': 486.72, 'y': -196.44, 'z': 125, 'w': 0},
            {'x': 464.15999999999997, 'y': -200.16, 'z': 125, 'w': 0},
            {'x': 459.72, 'y': -199.32, 'z': 125, 'w': 0},
            {'x': 459.72, 'y': -199.32, 'z': 150, 'w': 0},
            {'x': 490.32, 'y': -182.64, 'z': 150, 'w': 0},
            {'x': 490.32, 'y': -182.64, 'z': 125, 'w': 0},
            {'x': 486.48, 'y': -182.4, 'z': 125, 'w': 0},
            {'x': 467.04, 'y': -185.64, 'z': 125, 'w': 0},
            {'x': 461.52, 'y': -185.76, 'z': 125, 'w': 0},
            {'x': 458.76, 'y': -184.92000000000002, 'z': 125, 'w': 0},
            {'x': 458.76, 'y': -184.92000000000002, 'z': 150, 'w': 0},
            {'x': 480.6, 'y': -209.4, 'z': 150, 'w': 0},
            {'x': 480.6, 'y': -209.4, 'z': 125, 'w': 0},
            {'x': 477.0, 'y': -206.76, 'z': 125, 'w': 0},
            {'x': 476.4, 'y': -202.44, 'z': 125, 'w': 0},
            {'x': 477.36, 'y': -174.48000000000002, 'z': 125, 'w': 0},
            {'x': 479.28, 'y': -172.2, 'z': 125, 'w': 0},
            {'x': 479.28, 'y': -172.2, 'z': 150, 'w': 0},
            {'x': 498.96, 'y': -168.60000000000002, 'z': 150, 'w': 0},
            {'x': 498.96, 'y': -168.60000000000002, 'z': 125, 'w': 0},
            {'x': 497.88, 'y': -167.28, 'z': 125, 'w': 0},
            {'x': 496.32, 'y': -167.04000000000002, 'z': 125, 'w': 0},
            {'x': 472.8, 'y': -169.92000000000002, 'z': 125, 'w': 0},
            {'x': 452.04, 'y': -171.24, 'z': 125, 'w': 0},
            {'x': 447.72, 'y': -170.88, 'z': 125, 'w': 0},
            {'x': 441.84, 'y': -168.72, 'z': 125, 'w': 0},
            {'x': 441.84, 'y': -168.72, 'z': 150, 'w': 0},
            {'x': 0, 'y': 0, 'z': 0, 'w': 0},
        ]

        self.move_time = 2

    def publish_cartesian_goals(self):
        """ Publish predefined Cartesian trajectories to move the robot in a straight line. """
        for cartesian_goal in self.cartesian_goals:
            msg = PoseStamped()
            msg.pose.position.x = cartesian_goal['x']
            msg.pose.position.y = cartesian_goal['y']
            msg.pose.position.z = cartesian_goal['z']
            msg.pose.orientation.w = cartesian_goal['w']

            self.publisher.publish(msg)
            rclpy.spin_once(self, timeout_sec=self.move_time)
            self.get_logger().info(f'Published Cartesian goal: {{cartesian_goal}}')


def main(args=None):
    rclpy.init(args=args)
    cartesian_motion_publisher = CartesianMotionPublisher()
    cartesian_motion_publisher.publish_cartesian_goals()
    cartesian_motion_publisher.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
